class Solution {
public:
    int getlength(ListNode *head) {
        int len = 0;
        ListNode *temp = head;
        while (temp != nullptr) {  // Traverse the list to calculate length
            temp = temp->next;
            len++;
        }
        return len;
    }

    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *tempA = headA;
        ListNode *tempB = headB;
        
        int lenA = getlength(headA);
        int lenB = getlength(headB);
        int diff = lenA - lenB;
        
        // Adjust the starting point of the longer list by absolute value of difference
        if (diff > 0) {
            for (int i = 0; i < abs(diff); i++) {  // Move tempA forward by abs(diff)
                tempA = tempA->next;
            }
        } else {
            for (int i = 0; i < abs(diff); i++) {  // Move tempB forward by abs(diff)
                tempB = tempB->next;
            }
        }

        // Traverse both lists and compare node addresses
        while (tempA != nullptr && tempB != nullptr) {
            if (tempA == tempB) {  // Compare node addresses for intersection
                return tempA;
            }
            tempA = tempA->next;
            tempB = tempB->next;
        }
        
        return nullptr;  // Return nullptr if no intersection is found
    }
};
